{"ast":null,"code":"import { useRef, useState, useEffect } from 'react';\nfunction useUncontrolled({\n  value,\n  defaultValue,\n  finalValue,\n  rule,\n  onChange,\n  onValueUpdate\n}) {\n  const shouldBeControlled = rule(value);\n  const modeRef = useRef(\"initial\");\n  const initialValue = rule(defaultValue) ? defaultValue : finalValue;\n  const [uncontrolledValue, setUncontrolledValue] = useState(initialValue);\n  let effectiveValue = shouldBeControlled ? value : uncontrolledValue;\n  if (!shouldBeControlled && modeRef.current === \"controlled\") {\n    effectiveValue = finalValue;\n  }\n  modeRef.current = shouldBeControlled ? \"controlled\" : \"uncontrolled\";\n  const mode = modeRef.current;\n  const handleChange = nextValue => {\n    typeof onChange === \"function\" && onChange(nextValue);\n    if (mode === \"uncontrolled\") {\n      setUncontrolledValue(nextValue);\n    }\n  };\n  useEffect(() => {\n    if (mode === \"uncontrolled\") {\n      setUncontrolledValue(effectiveValue);\n    }\n    typeof onValueUpdate === \"function\" && onValueUpdate(effectiveValue);\n  }, [mode, effectiveValue]);\n  return [effectiveValue, handleChange, modeRef.current];\n}\nexport { useUncontrolled };","map":{"version":3,"names":["useUncontrolled","value","defaultValue","finalValue","rule","onChange","onValueUpdate","shouldBeControlled","modeRef","useRef","initialValue","uncontrolledValue","setUncontrolledValue","useState","effectiveValue","current","mode","handleChange","nextValue","useEffect"],"sources":["C:\\Users\\asma1\\OneDrive\\Bureau\\react\\todo_react_app\\node_modules\\@mantine\\hooks\\src\\use-uncontrolled\\use-uncontrolled.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nexport type UncontrolledMode = 'initial' | 'controlled' | 'uncontrolled';\n\nexport interface UncontrolledOptions<T> {\n  value: T | null | undefined;\n  defaultValue: T | null | undefined;\n  finalValue: T | null;\n  onChange(value: T | null): void;\n  onValueUpdate?(value: T | null): void;\n  rule: (value: T | null | undefined) => boolean;\n}\n\nexport function useUncontrolled<T>({\n  value,\n  defaultValue,\n  finalValue,\n  rule,\n  onChange,\n  onValueUpdate,\n}: UncontrolledOptions<T>): readonly [T | null, (nextValue: T | null) => void, UncontrolledMode] {\n  // determine, whether new props indicate controlled state\n  const shouldBeControlled = rule(value);\n\n  // initialize state\n  const modeRef = useRef<UncontrolledMode>('initial');\n  const initialValue = rule(defaultValue) ? defaultValue : finalValue;\n  const [uncontrolledValue, setUncontrolledValue] = useState(initialValue);\n\n  // compute effective value\n  let effectiveValue = shouldBeControlled ? value : uncontrolledValue;\n\n  if (!shouldBeControlled && modeRef.current === 'controlled') {\n    // We are transitioning from controlled to uncontrolled\n    // this transition is special as it happens when clearing out\n    // the input using \"invalid\" value (typically null or undefined).\n    //\n    // Since the value is invalid, doing nothing would mean just\n    // transitioning to uncontrolled state and using whatever value\n    // it currently holds which is likely not the behavior\n    // user expects, so lets change the state to finalValue.\n    //\n    // The value will be propagated to internal state by useEffect below.\n\n    effectiveValue = finalValue;\n  }\n\n  modeRef.current = shouldBeControlled ? 'controlled' : 'uncontrolled';\n  const mode = modeRef.current;\n\n  const handleChange = (nextValue: T | null) => {\n    typeof onChange === 'function' && onChange(nextValue);\n\n    // Controlled input only triggers onChange event and expects\n    // the controller to propagate new value back.\n    if (mode === 'uncontrolled') {\n      setUncontrolledValue(nextValue);\n    }\n  };\n\n  useEffect(() => {\n    if (mode === 'uncontrolled') {\n      setUncontrolledValue(effectiveValue);\n    }\n    typeof onValueUpdate === 'function' && onValueUpdate(effectiveValue);\n  }, [mode, effectiveValue]);\n\n  return [effectiveValue, handleChange, modeRef.current] as const;\n}\n"],"mappings":";AACO,SAASA,eAAeA,CAAC;EAC9BC,KAAK;EACLC,YAAY;EACZC,UAAU;EACVC,IAAI;EACJC,QAAQ;EACRC;AACF,CAAC,EAAE;EACD,MAAMC,kBAAkB,GAAGH,IAAI,CAACH,KAAK,CAAC;EACtC,MAAMO,OAAO,GAAGC,MAAM,CAAC,SAAS,CAAC;EACjC,MAAMC,YAAY,GAAGN,IAAI,CAACF,YAAY,CAAC,GAAGA,YAAY,GAAGC,UAAU;EACnE,MAAM,CAACQ,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGC,QAAQ,CAACH,YAAY,CAAC;EACxE,IAAII,cAAc,GAAGP,kBAAkB,GAAGN,KAAK,GAAGU,iBAAiB;EACnE,IAAI,CAACJ,kBAAkB,IAAIC,OAAO,CAACO,OAAO,KAAK,YAAY,EAAE;IAC3DD,cAAc,GAAGX,UAAU;EAC/B;EACEK,OAAO,CAACO,OAAO,GAAGR,kBAAkB,GAAG,YAAY,GAAG,cAAc;EACpE,MAAMS,IAAI,GAAGR,OAAO,CAACO,OAAO;EAC5B,MAAME,YAAY,GAAIC,SAAS,IAAK;IAClC,OAAOb,QAAQ,KAAK,UAAU,IAAIA,QAAQ,CAACa,SAAS,CAAC;IACrD,IAAIF,IAAI,KAAK,cAAc,EAAE;MAC3BJ,oBAAoB,CAACM,SAAS,CAAC;IACrC;EACA,CAAG;EACDC,SAAS,CAAC,MAAM;IACd,IAAIH,IAAI,KAAK,cAAc,EAAE;MAC3BJ,oBAAoB,CAACE,cAAc,CAAC;IAC1C;IACI,OAAOR,aAAa,KAAK,UAAU,IAAIA,aAAa,CAACQ,cAAc,CAAC;EACxE,CAAG,EAAE,CAACE,IAAI,EAAEF,cAAc,CAAC,CAAC;EAC1B,OAAO,CAACA,cAAc,EAAEG,YAAY,EAAET,OAAO,CAACO,OAAO,CAAC;AACxD"},"metadata":{},"sourceType":"module","externalDependencies":[]}