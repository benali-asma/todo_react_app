{"ast":null,"code":"import * as o from \"react\";\nexport function composeRefs(...o) {\n  return e => o.forEach(o => function (o, e) {\n    \"function\" == typeof o ? o(e) : null != o && (o.current = e);\n  }(o, e));\n}\nexport function useComposedRefs(...e) {\n  return o.useCallback(composeRefs(...e), e);\n}","map":{"version":3,"names":["composeRefs","o","e","forEach","current","useComposedRefs","useCallback"],"sources":["C:\\Users\\asma1\\OneDrive\\Bureau\\react\\todo_react_app\\node_modules\\@mantine\\core\\node_modules\\@radix-ui\\react-scroll-area\\node_modules\\@radix-ui\\react-compose-refs\\dist\\packages\\react\\compose-refs\\src\\composeRefs.tsx"],"sourcesContent":["import * as React from 'react';\n\ntype PossibleRef<T> = React.Ref<T> | undefined;\n\n/**\n * Set a given ref to a given value\n * This utility takes care of different types of refs: callback refs and RefObject(s)\n */\nfunction setRef<T>(ref: PossibleRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref !== null && ref !== undefined) {\n    (ref as React.MutableRefObject<T>).current = value;\n  }\n}\n\n/**\n * A utility to compose multiple refs together\n * Accepts callback refs and RefObject(s)\n */\nfunction composeRefs<T>(...refs: PossibleRef<T>[]) {\n  return (node: T) => refs.forEach((ref) => setRef(ref, node));\n}\n\n/**\n * A custom hook that composes multiple refs\n * Accepts callback refs and RefObject(s)\n */\nfunction useComposedRefs<T>(...refs: PossibleRef<T>[]) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return React.useCallback(composeRefs(...refs), refs);\n}\n\nexport { composeRefs, useComposedRefs };\n"],"mappings":";OAoBA,SAASA,YAAA,GAAkBC,CAAA;EACzB,OAAQC,CAAA,IAAYD,CAAA,CAAKE,OAAA,CAASF,CAAA,IAbpC,UAAmBA,CAAA,EAAqBC,CAAA;IACnB,qBAARD,CAAA,GACTA,CAAA,CAAIC,CAAA,IACK,QAAAD,CAAA,KACRA,CAAA,CAAkCG,OAAA,GAAUF,CAAA;EAAA,CASL,CAAOD,CAAA,EAAKC,CAAA;AAAA;AAAA,OAOxD,SAASG,gBAAA,GAAsBH,CAAA;EAE7B,OAAOD,CAAA,CAAMK,WAAA,CAAYN,WAAA,IAAeE,CAAA,GAAOA,CAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}