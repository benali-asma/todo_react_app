{"ast":null,"code":"import { composeRefs as e } from \"@radix-ui/react-compose-refs\";\nimport * as t from \"react\";\nimport r from \"@babel/runtime/helpers/esm/extends\";\nexport const Slot = /*#__PURE__*/t.forwardRef((e, o) => {\n  const {\n    children: a,\n    ...s\n  } = e;\n  return t.Children.toArray(a).some(l) ? /*#__PURE__*/t.createElement(t.Fragment, null, t.Children.map(a, e => l(e) ? /*#__PURE__*/t.createElement(n, r({}, s, {\n    ref: o\n  }), e.props.children) : e)) : /*#__PURE__*/t.createElement(n, r({}, s, {\n    ref: o\n  }), a);\n});\nSlot.displayName = \"Slot\";\nconst n = /*#__PURE__*/t.forwardRef((r, n) => {\n  const {\n    children: l,\n    ...a\n  } = r; /*#__PURE__*/\n  return t.isValidElement(l) ? /*#__PURE__*/t.cloneElement(l, {\n    ...o(a, l.props),\n    ref: e(n, l.ref)\n  }) : t.Children.count(l) > 1 ? t.Children.only(null) : null;\n});\nn.displayName = \"SlotClone\";\nexport const Slottable = ({\n  children: e\n}) => /*#__PURE__*/t.createElement(t.Fragment, null, e);\nfunction l(e) {\n  /*#__PURE__*/return t.isValidElement(e) && e.type === Slottable;\n}\nfunction o(e, t) {\n  const r = {\n    ...t\n  };\n  for (const n in t) {\n    const l = e[n],\n      o = t[n];\n    /^on[A-Z]/.test(n) ? r[n] = (...e) => {\n      null == o || o(...e), null == l || l(...e);\n    } : \"style\" === n ? r[n] = {\n      ...l,\n      ...o\n    } : \"className\" === n && (r[n] = [l, o].filter(Boolean).join(\" \"));\n  }\n  return {\n    ...e,\n    ...r\n  };\n}\nexport const Root = Slot;","map":{"version":3,"names":["Slot","t","forwardRef","e","o","children","a","s","Children","toArray","some","l","createElement","Fragment","map","n","r","ref","props","displayName","isValidElement","cloneElement","count","only","Slottable","type","test","filter","Boolean","join","Root"],"sources":["C:\\Users\\asma1\\OneDrive\\Bureau\\react\\todo_react_app\\node_modules\\@mantine\\core\\node_modules\\@radix-ui\\react-scroll-area\\node_modules\\@radix-ui\\react-primitive\\node_modules\\@radix-ui\\react-slot\\dist\\packages\\react\\slot\\src\\Slot.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeRefs } from '@radix-ui/react-compose-refs';\n\n/* -------------------------------------------------------------------------------------------------\n * Slot\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SlotProps extends React.HTMLAttributes<HTMLElement> {\n  children?: React.ReactNode;\n}\n\nconst Slot = React.forwardRef<HTMLElement, SlotProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n\n  if (React.Children.toArray(children).some(isSlottable)) {\n    return (\n      <>\n        {React.Children.map(children, (child) => {\n          return isSlottable(child) ? (\n            <SlotClone {...slotProps} ref={forwardedRef}>\n              {child.props.children}\n            </SlotClone>\n          ) : (\n            child\n          );\n        })}\n      </>\n    );\n  }\n\n  return (\n    <SlotClone {...slotProps} ref={forwardedRef}>\n      {children}\n    </SlotClone>\n  );\n});\n\nSlot.displayName = 'Slot';\n\n/* -------------------------------------------------------------------------------------------------\n * SlotClone\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SlotCloneProps {\n  children: React.ReactNode;\n}\n\nconst SlotClone = React.forwardRef<any, SlotCloneProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n\n  if (React.isValidElement(children)) {\n    return React.cloneElement(children, {\n      ...mergeProps(slotProps, children.props),\n      ref: composeRefs(forwardedRef, (children as any).ref),\n    });\n  }\n\n  return React.Children.count(children) > 1 ? React.Children.only(null) : null;\n});\n\nSlotClone.displayName = 'SlotClone';\n\n/* -------------------------------------------------------------------------------------------------\n * Slottable\n * -----------------------------------------------------------------------------------------------*/\n\nconst Slottable = ({ children }: { children: React.ReactNode }) => {\n  return <>{children}</>;\n};\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype AnyProps = Record<string, any>;\n\nfunction isSlottable(child: React.ReactNode): child is React.ReactElement {\n  return React.isValidElement(child) && child.type === Slottable;\n}\n\nfunction mergeProps(slotProps: AnyProps, childProps: AnyProps) {\n  // all child props should override\n  const overrideProps = { ...childProps };\n\n  for (const propName in childProps) {\n    const slotPropValue = slotProps[propName];\n    const childPropValue = childProps[propName];\n\n    const isHandler = /^on[A-Z]/.test(propName);\n    // if it's a handler, modify the override by composing the base handler\n    if (isHandler) {\n      overrideProps[propName] = (...args: unknown[]) => {\n        childPropValue?.(...args);\n        slotPropValue?.(...args);\n      };\n    }\n    // if it's `style`, we merge them\n    else if (propName === 'style') {\n      overrideProps[propName] = { ...slotPropValue, ...childPropValue };\n    } else if (propName === 'className') {\n      overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(' ');\n    }\n  }\n\n  return { ...slotProps, ...overrideProps };\n}\n\nconst Root = Slot;\n\nexport {\n  Slot,\n  Slottable,\n  //\n  Root,\n};\nexport type { SlotProps };\n"],"mappings":";;;OAWA,MAAMA,IAAA,gBAAOC,CAAA,CAAMC,UAAA,CAAmC,CAACC,CAAA,EAAOC,CAAA;EAC5D;IAAMC,QAAA,EAAEC,CAAA;IAAA,GAAaC;EAAA,IAAcJ,CAAA;EAEnC,OAAIF,CAAA,CAAMO,QAAA,CAASC,OAAA,CAAQH,CAAA,EAAUI,IAAA,CAAKC,CAAA,iBAEtCV,CAAA,CAAAW,aAAA,CAAAX,CAAA,CAAAY,QAAA,QACGZ,CAAA,CAAMO,QAAA,CAASM,GAAA,CAAIR,CAAA,EAAWH,CAAA,IACtBQ,CAAA,CAAYR,CAAA,iBACjBF,CAAA,CAAAW,aAAA,CAACG,CAAA,EAADC,CAAA,KAAeT,CAAA,EAAf;IAA0BU,GAAA,EAAKb;EAAA,IAC5BD,CAAA,CAAMe,KAAA,CAAMb,QAAA,IAGfF,CAAA,kBAQRF,CAAA,CAAAW,aAAA,CAACG,CAAA,EAADC,CAAA,KAAeT,CAAA,EAAf;IAA0BU,GAAA,EAAKb;EAAA,IAC5BE,CAAA;AAAA;AAKPN,IAAA,CAAKmB,WAAA,GAAc;AAUnB,MAAMJ,CAAA,gBAAYd,CAAA,CAAMC,UAAA,CAAgC,CAACc,CAAA,EAAOD,CAAA;EAC9D;IAAMV,QAAA,EAAEM,CAAA;IAAA,GAAaL;EAAA,IAAcU,CAAA;EAEnC,OAAIf,CAAA,CAAMmB,cAAA,CAAeT,CAAA,iBAChBV,CAAA,CAAMoB,YAAA,CAAaV,CAAA,EAAU;IAAA,GAC/BP,CAAA,CAAWE,CAAA,EAAWK,CAAA,CAASO,KAAA;IAClCD,GAAA,EAAKd,CAAA,CAAYY,CAAA,EAAeJ,CAAA,CAAiBM,GAAA;EAAA,KAI9ChB,CAAA,CAAMO,QAAA,CAASc,KAAA,CAAMX,CAAA,IAAY,IAAIV,CAAA,CAAMO,QAAA,CAASe,IAAA,CAAK,QAAQ;AAAA;AAG1ER,CAAA,CAAUI,WAAA,GAAc;AAAA,OAMxB,MAAMK,SAAA,GAAYA,CAAA;EAAGnB,QAAA,EAAAF;AAAA,mBACZF,CAAA,CAAAW,aAAA,CAAAX,CAAA,CAAAY,QAAA,QAAGV,CAAA;AAOZ,SAASQ,EAAYR,CAAA;EAAA,aACnB,OAAOF,CAAA,CAAMmB,cAAA,CAAejB,CAAA,KAAUA,CAAA,CAAMsB,IAAA,KAASD,SAAA;AAAA;AAGvD,SAASpB,EAAWD,CAAA,EAAqBF,CAAA;EAEvC,MAAMe,CAAA,GAAgB;IAAA,GAAKf;EAAA;EAE3B,KAAK,MAAMc,CAAA,IAAYd,CAAA,EAAY;IACjC,MAAMU,CAAA,GAAgBR,CAAA,CAAUY,CAAA;MAC1BX,CAAA,GAAiBH,CAAA,CAAWc,CAAA;IAEhB,WAAWW,IAAA,CAAKX,CAAA,IAGhCC,CAAA,CAAcD,CAAA,IAAY,IAAIZ,CAAA;MAC5B,QAAAC,CAAA,IAAAA,CAAA,IAAoBD,CAAA,GACpB,QAAAQ,CAAA,IAAAA,CAAA,IAAmBR,CAAA;IAAA,IAID,YAAbY,CAAA,GACPC,CAAA,CAAcD,CAAA,IAAY;MAAA,GAAKJ,CAAA;MAAA,GAAkBP;IAAA,IAC3B,gBAAbW,CAAA,KACTC,CAAA,CAAcD,CAAA,IAAY,CAACJ,CAAA,EAAeP,CAAA,EAAgBuB,MAAA,CAAOC,OAAA,EAASC,IAAA,CAAK;EAAA;EAInF,OAAO;IAAA,GAAK1B,CAAA;IAAA,GAAca;EAAA;AAAA;AAAA,OAG5B,MAAMc,IAAA,GAAO9B,IAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}