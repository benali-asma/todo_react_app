{"ast":null,"code":"import { useMemo } from 'react';\nimport { useUncontrolled } from '../use-uncontrolled/use-uncontrolled.js';\nimport { range } from '../utils/range/range.js';\nconst DOTS = \"dots\";\nfunction usePagination({\n  total,\n  siblings = 1,\n  boundaries = 1,\n  page,\n  initialPage = 1,\n  onChange\n}) {\n  const [activePage, setActivePage] = useUncontrolled({\n    value: page,\n    onChange,\n    defaultValue: initialPage,\n    finalValue: initialPage,\n    rule: _page => typeof _page === \"number\" && _page <= total\n  });\n  const setPage = pageNumber => {\n    if (pageNumber <= 0) {\n      setActivePage(1);\n    } else if (pageNumber > total) {\n      setActivePage(total);\n    } else {\n      setActivePage(pageNumber);\n    }\n  };\n  const next = () => setPage(activePage + 1);\n  const previous = () => setPage(activePage - 1);\n  const first = () => setPage(1);\n  const last = () => setPage(total);\n  const paginationRange = useMemo(() => {\n    const totalPageNumbers = siblings * 2 + 3 + boundaries * 2;\n    if (totalPageNumbers >= total) {\n      return range(1, total);\n    }\n    const leftSiblingIndex = Math.max(activePage - siblings, boundaries);\n    const rightSiblingIndex = Math.min(activePage + siblings, total - boundaries);\n    const shouldShowLeftDots = leftSiblingIndex > boundaries + 2;\n    const shouldShowRightDots = rightSiblingIndex < total - (boundaries + 1);\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      const leftItemCount = siblings * 2 + boundaries + 2;\n      return [...range(1, leftItemCount), DOTS, ...range(total - (boundaries - 1), total)];\n    }\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      const rightItemCount = boundaries + 1 + 2 * siblings;\n      return [...range(1, boundaries), DOTS, ...range(total - rightItemCount, total)];\n    }\n    return [...range(1, boundaries), DOTS, ...range(leftSiblingIndex, rightSiblingIndex), DOTS, ...range(total - boundaries + 1, total)];\n  }, [total, siblings, activePage]);\n  return {\n    range: paginationRange,\n    active: activePage,\n    setPage,\n    next,\n    previous,\n    first,\n    last\n  };\n}\nexport { DOTS, usePagination };","map":{"version":3,"names":["DOTS","usePagination","total","siblings","boundaries","page","initialPage","onChange","activePage","setActivePage","useUncontrolled","value","defaultValue","finalValue","rule","_page","setPage","pageNumber","next","previous","first","last","paginationRange","useMemo","totalPageNumbers","range","leftSiblingIndex","Math","max","rightSiblingIndex","min","shouldShowLeftDots","shouldShowRightDots","leftItemCount","rightItemCount","active"],"sources":["C:\\Users\\asma1\\OneDrive\\Bureau\\react\\todo_react_app\\node_modules\\@mantine\\hooks\\src\\use-pagination\\use-pagination.ts"],"sourcesContent":["import { useMemo } from 'react';\nimport { useUncontrolled } from '../use-uncontrolled/use-uncontrolled';\nimport { range } from '../utils';\n\nexport const DOTS = 'dots';\n\nexport interface PaginationParams {\n  /** Page selected on initial render, defaults to 1 */\n  initialPage?: number;\n\n  /** Controlled active page number */\n  page?: number;\n\n  /** Total amount of pages */\n  total: number;\n\n  /** Siblings amount on left/right side of selected page, defaults to 1 */\n  siblings?: number;\n\n  /** Amount of elements visible on left/right edges, defaults to 1  */\n  boundaries?: number;\n\n  /** Callback fired after change of each page */\n  onChange?: (page: number) => void;\n}\n\nexport function usePagination({\n  total,\n  siblings = 1,\n  boundaries = 1,\n  page,\n  initialPage = 1,\n  onChange,\n}: PaginationParams) {\n  const [activePage, setActivePage] = useUncontrolled({\n    value: page,\n    onChange,\n    defaultValue: initialPage,\n    finalValue: initialPage,\n    rule: (_page) => typeof _page === 'number' && _page <= total,\n  });\n\n  const setPage = (pageNumber: number) => {\n    if (pageNumber <= 0) {\n      setActivePage(1);\n    } else if (pageNumber > total) {\n      setActivePage(total);\n    } else {\n      setActivePage(pageNumber);\n    }\n  };\n\n  const next = () => setPage(activePage + 1);\n  const previous = () => setPage(activePage - 1);\n  const first = () => setPage(1);\n  const last = () => setPage(total);\n\n  const paginationRange = useMemo((): (number | 'dots')[] => {\n    // Pages count is determined as siblings (left/right) + boundaries(left/right) + currentPage + 2*DOTS\n    const totalPageNumbers = siblings * 2 + 3 + boundaries * 2;\n\n    /*\n     * If the number of pages is less than the page numbers we want to show in our\n     * paginationComponent, we return the range [1..total]\n     */\n    if (totalPageNumbers >= total) {\n      return range(1, total);\n    }\n\n    const leftSiblingIndex = Math.max(activePage - siblings, boundaries);\n    const rightSiblingIndex = Math.min(activePage + siblings, total - boundaries);\n\n    /*\n     * We do not want to show dots if there is only one position left\n     * after/before the left/right page count as that would lead to a change if our Pagination\n     * component size which we do not want\n     */\n    const shouldShowLeftDots = leftSiblingIndex > boundaries + 2;\n    const shouldShowRightDots = rightSiblingIndex < total - (boundaries + 1);\n\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      const leftItemCount = siblings * 2 + boundaries + 2;\n      return [...range(1, leftItemCount), DOTS, ...range(total - (boundaries - 1), total)];\n    }\n\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      const rightItemCount = boundaries + 1 + 2 * siblings;\n      return [...range(1, boundaries), DOTS, ...range(total - rightItemCount, total)];\n    }\n\n    return [\n      ...range(1, boundaries),\n      DOTS,\n      ...range(leftSiblingIndex, rightSiblingIndex),\n      DOTS,\n      ...range(total - boundaries + 1, total),\n    ];\n  }, [total, siblings, activePage]);\n\n  return {\n    range: paginationRange,\n    active: activePage,\n    setPage,\n    next,\n    previous,\n    first,\n    last,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}