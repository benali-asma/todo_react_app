{"ast":null,"code":"import * as e from \"react\";\nexport function useCallbackRef(r) {\n  const t = e.useRef(r);\n  return e.useEffect(() => {\n    t.current = r;\n  }), e.useMemo(() => (...e) => {\n    var r;\n    return null === (r = t.current) || void 0 === r ? void 0 : r.call(t, ...e);\n  }, []);\n}","map":{"version":3,"names":["useCallbackRef","r","t","e","useRef","useEffect","current","useMemo","call"],"sources":["C:\\Users\\asma1\\OneDrive\\Bureau\\react\\todo_react_app\\node_modules\\@mantine\\core\\node_modules\\@radix-ui\\react-scroll-area\\node_modules\\@radix-ui\\react-use-callback-ref\\dist\\packages\\react\\use-callback-ref\\src\\useCallbackRef.tsx"],"sourcesContent":["import * as React from 'react';\n\n/**\n * A custom hook that converts a callback to a ref to avoid triggering re-renders when passed as a\n * prop or avoid re-executing effects when passed as a dependency\n */\nfunction useCallbackRef<T extends (...args: any[]) => any>(callback: T | undefined): T {\n  const callbackRef = React.useRef(callback);\n\n  React.useEffect(() => {\n    callbackRef.current = callback;\n  });\n\n  // https://github.com/facebook/react/issues/19240\n  return React.useMemo(() => ((...args) => callbackRef.current?.(...args)) as T, []);\n}\n\nexport { useCallbackRef };\n"],"mappings":";OAMA,SAASA,eAAkDC,CAAA;EACzD,MAAMC,CAAA,GAAcC,CAAA,CAAMC,MAAA,CAAOH,CAAA;EAOjC,OALAE,CAAA,CAAME,SAAA,CAAU;IACdH,CAAA,CAAYI,OAAA,GAAUL,CAAA;EAAA,IAIjBE,CAAA,CAAMI,OAAA,CAAQ,MAAO,IAAIJ,CAAA;IAAJ,IAAAF,CAAA;IAAA,iBAAAA,CAAA,GAAaC,CAAA,CAAYI,OAAA,UAAzB,MAAAL,CAAA,YAAaA,CAAA,CAAAO,IAAA,CAAAN,CAAA,KAAyBC,CAAA;EAAA,GAAa;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}